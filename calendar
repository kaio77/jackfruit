
package iCalendar;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.SocketException;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.TimeZone;
import java.util.Vector;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import net.fortuna.ical4j.data.CalendarBuilder;
import net.fortuna.ical4j.data.CalendarOutputter;
import net.fortuna.ical4j.model.Calendar;
import net.fortuna.ical4j.model.Component;
import net.fortuna.ical4j.model.DateTime;
import net.fortuna.ical4j.model.Property;
import net.fortuna.ical4j.model.TimeZoneRegistry;
import net.fortuna.ical4j.model.TimeZoneRegistryFactory;
import net.fortuna.ical4j.model.ValidationException;
import net.fortuna.ical4j.model.component.VEvent;
import net.fortuna.ical4j.model.component.VTimeZone;
import net.fortuna.ical4j.model.property.CalScale;
import net.fortuna.ical4j.model.property.Clazz;
import net.fortuna.ical4j.model.property.Priority;
import net.fortuna.ical4j.model.property.ProdId;
import net.fortuna.ical4j.model.property.Uid;
import net.fortuna.ical4j.model.property.Version;
import net.fortuna.ical4j.util.UidGenerator;


public class checkUp3 {


    private static final net.fortuna.ical4j.model.TimeZone timezone = null;

    public static void main(String[] args) throws FileNotFoundException, IOException, ValidationException {
        mainSou();
    }

    static Vector<String> timeCap = new Vector<String>();
    static String date_ = "";

    private static Vector fileChooser(String title) {
        Vector<String> v = new Vector<String>();

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("iCalendar ics", "ics");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle(title);
        chooser.setMultiSelectionEnabled(true);
        int returnVal = chooser.showOpenDialog(chooser);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            for (File f : chooser.getSelectedFiles()) {
                v.add(f.getAbsolutePath());
            }
        }

        return v;
    }

    private static void mainSou() throws FileNotFoundException, IOException, ValidationException {
        Vector<String> pA = fileChooser("First List");
        Vector<String> pB = fileChooser("Secound List");

        timeCap.add("000000-240000");

        if (pA != null) {
            for (String path : pA) {
                time_reader(path);
            }
        }
        if (pB != null) {
            for (String path : pB) {
                time_reader(path);
            }
        }
        int i = 0;
        net.fortuna.ical4j.model.Calendar cal = new net.fortuna.ical4j.model.Calendar();
        //add product Id
    
        cal.getProperties().add(new ProdId("-//ICS314//Team JackFruit Calendar v3//iCal4j//EN"));
        cal.getProperties().add(Version.VERSION_2_0);
        cal.getProperties().add(CalScale.GREGORIAN);
        for (String timeCap1 : timeCap) {
            try {
                saving_(cal ,timeCap1,i);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            i++;
        }
        //save event in test.ics file
        CalendarOutputter out = new CalendarOutputter();
        out.output(cal, new FileOutputStream("D:\\ics\\free_time.ics"));
        System.out.println(cal);

    }

    private static void time_reader(String path) {
        try {
            FileInputStream fis = new FileInputStream(path);

            CalendarBuilder builder = new CalendarBuilder();
            Calendar calendar = builder.build(fis);

            for (Iterator it = calendar.getComponents().iterator(); it.hasNext();) {
                Component component = (Component) it.next();
                long st = 0;
                long en = 0;
                for (Iterator j = component.getProperties().iterator(); j.hasNext();) {

                    Property property = (Property) j.next();
                    if (property.getName() == "DTSTART") {
                        st = Integer.parseInt(property.getValue().substring(property.getValue().lastIndexOf("T") + 1));
                        date_ = property.getValue().split("T")[0];
                        String x = date_.substring(4, 6);
                        int  m = Integer.parseInt(x) -1;
                        String n = m + "";
                        if(m < 10){
                            n = "0" + m;
                        }
                        date_ = date_.substring(0, 4) + n + date_.substring(6, 8);
                        
                    } else if (property.getName() == "DTEND") {
                        en = Integer.parseInt(property.getValue().substring(property.getValue().lastIndexOf("T") + 1));
                    }
                }

                if (en != 0) {
                    calculateTime(st, en);
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private static void calculateTime(long Start, long End) {
        Vector<String> add_sto = new Vector<String>();
        Vector<String> remove_sto = new Vector<String>();
        for (String tp : timeCap) {
            long st = Long.parseLong(tp.split("-")[0]);
            long en = Long.parseLong(tp.split("-")[1]);

            if ((st < Start) && (en > End)) {
                add_sto.add(String.valueOf(st) + "-" + String.valueOf(Start));
                add_sto.add(String.valueOf(End) + "-" + String.valueOf(en));
                remove_sto.add(tp);
            } else if ((st < Start) && (en > Start)) {
                add_sto.add(String.valueOf(st) + "-" + String.valueOf(Start));
                remove_sto.add(tp);
            } else if ((End > st) && (en > End)) {
                add_sto.add(String.valueOf(End) + "-" + String.valueOf(en));
                remove_sto.add(tp);
            }
        }
        for (String rm : remove_sto) {
            timeCap.remove(rm);
        }
        for (String ad : add_sto) {
            timeCap.add(ad);
        }

    }

    private static void saving_(net.fortuna.ical4j.model.Calendar cal, String s, int i) throws SocketException, IOException, ValidationException {

        GregorianCalendar start = new GregorianCalendar();
        start.set(Integer.parseInt(date_.substring(0, 4)), Integer.parseInt(date_.substring(4, 6)), Integer.parseInt(date_.substring(6, 8)), s.split("-")[0].length() > 1 ? Integer.parseInt(s.split("-")[0].substring(0, 2)) : 0, s.split("-")[0].length() > 1 ? Integer.parseInt(s.split("-")[0].substring(2, 4)) : 0);

        GregorianCalendar end = new GregorianCalendar();
        end.set(Integer.parseInt(date_.substring(0, 4)), Integer.parseInt(date_.substring(4, 6)), Integer.parseInt(date_.substring(6, 8)), s.split("-")[1].length() > 1 ? Integer.parseInt(s.split("-")[1].substring(0, 2)) : 0, s.split("-")[1].length() > 1 ? Integer.parseInt(s.split("-")[1].substring(2, 4)) : 0);

     // Create a TimeZone
        TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry();
       TimeZone timezone = registry.getTimeZone("US/Hawaii");
     
        
        DateTime startTime = new DateTime(start.getTime());
        DateTime endTime = new DateTime(end.getTime());
        
        startTime.setTimeZone((net.fortuna.ical4j.model.TimeZone) timezone);
        endTime.setTimeZone((net.fortuna.ical4j.model.TimeZone) timezone);

        //Create event
        VEvent eightHourEvent = new VEvent(startTime, endTime, "free time");
        
         //generate unique identifier
        UidGenerator ug = new UidGenerator("uidGen");
        Uid uid = ug.generateUid();
    
        eightHourEvent.getProperties().add(uid);
        eightHourEvent.getProperties().add(new Priority(0));
        eightHourEvent.getProperties().add(new Clazz("Public"));
        
        //add event in ical4j calendar
        cal.getComponents().add(eightHourEvent);
        
    
    }

}
